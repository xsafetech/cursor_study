---
description: 
globs: 
---
---
description: Guide for manual source code review focusing on systematic code reading and analysis without relying on automated tools
globs: "**/*.{java,xml,properties,yml}"
tags: [security, audit, manual-review]
priority: 1
version: 1.0.0
---
# Manual Source Code Review Guide

<critical>
This guide emphasizes manual code reading and analysis. Do NOT rely on static analysis tools.
Focus on understanding code logic, data flow, and business context through careful code review.
</critical>

## Code Reading Preparation

### 1. Project Structure Understanding
- Map out the codebase structure
- Identify key entry points
- Understand component relationships
- Document code organization patterns

### 2. Business Logic Understanding
- Review business requirements
- Identify critical workflows
- Map data processing flows
- Document trust boundaries

### 3. Framework Knowledge
- Study framework features
- Understand security mechanisms
- Review common pitfalls
- Document framework patterns

## Code Reading Strategy

### 1. Top-Down Reading
```java
// Start from entry points:
- Controller endpoints
- Public APIs
- Event handlers
- Scheduled tasks
```

### 2. Bottom-Up Reading
```java
// Start from data access:
- Database operations
- File operations
- External service calls
- Cache interactions
```

### 3. Cross-Component Reading
```java
// Follow data flow:
- Parameter passing
- Return values
- Exception propagation
- State changes
```

## Focus Areas

### 1. Authentication Review
```java
// Read and analyze:
- Login implementation
- Session management
- Password handling
- Token processing
- Remember-me logic
```

### 2. Authorization Review
```java
// Trace through:
- Permission checks
- Role validations
- Access controls
- Data ownership
```

### 3. Data Processing Review
```java
// Follow data:
- Input validation
- Data transformation
- Business processing
- Output handling
```

### 4. Error Handling Review
```java
// Analyze:
- Exception types
- Error messages
- Recovery logic
- Logging practices
```

## Code Reading Techniques

### 1. Entry Point Analysis
1. Start from public methods
2. Follow parameter usage
3. Track return values
4. Note side effects

### 2. Call Chain Analysis
1. Map method calls
2. Track object creation
3. Follow state changes
4. Document dependencies

### 3. Data Flow Analysis
1. Identify data sources
2. Follow transformations
3. Track storage points
4. Verify sanitization

### 4. Control Flow Analysis
1. Map decision points
2. Analyze conditions
3. Check error paths
4. Verify boundaries

## Common Vulnerability Patterns

### 1. Access Control Issues
```java
// Look for:
- Missing checks
- Inconsistent validation
- Privilege escalation paths
- Context confusion
```

### 2. Data Handling Issues
```java
// Check for:
- Insufficient validation
- Unsafe transformations
- Improper encoding
- Trust boundary violations
```

### 3. Logic Flaws
```java
// Analyze:
- Race conditions
- State manipulation
- Assumption violations
- Business rule bypasses
```

## Vulnerability Pattern Recognition

### 1. SQL Injection Pattern Reading
```java
// Look for these patterns in code:
- Direct string concatenation in SQL queries
  BAD:  "SELECT * FROM users WHERE id = " + userId
  GOOD: "SELECT * FROM users WHERE id = ?"

- Dynamic SQL in MyBatis annotations
  BAD:  @Select("SELECT * FROM ${table}")
  GOOD: @Select("SELECT * FROM #{table}")

- Raw Statement usage instead of PreparedStatement
  BAD:  Statement.execute(query)
  GOOD: PreparedStatement with parameters
```

### 2. Command Injection Pattern Reading
```java
// Look for these patterns:
- Runtime.exec() with dynamic input
  BAD:  Runtime.getRuntime().exec(userInput)
  GOOD: Runtime.getRuntime().exec(new String[]{"ls", "-l"})

- ProcessBuilder with unsanitized input
  BAD:  new ProcessBuilder(command.split(" "))
  GOOD: new ProcessBuilder("ls", "-l")

Key points to check:
- Command string construction
- Parameter handling
- Input sanitization
```

### 3. XXE Pattern Reading
```java
// Look for XML parsing configurations:
- DocumentBuilderFactory settings
  Check for missing security features:
  - disallow-doctype-decl
  - external-general-entities
  - external-parameter-entities
  
- SAXParserFactory configurations
  Verify disabled features:
  - external entities
  - external parameters
  - XInclude processing
```

### 4. Path Traversal Pattern Reading
```java
// Look for file operations:
- File path construction
  BAD:  new File(basePath + userInput)
  GOOD: Path normalization and validation

- ZIP extraction
  Check for:
  - Path validation before extraction
  - Directory traversal prevention
  - Destination path verification
```

### 5. Deserialization Pattern Reading
```java
// Look for:
- ObjectInputStream usage without filters
  BAD:  new ObjectInputStream(input)
  GOOD: Custom ObjectInputFilter implementation

- Jackson deserialization
  Check @JsonTypeInfo usage:
  BAD:  @JsonTypeInfo(use = Id.CLASS)
  GOOD: Explicit class whitelisting
```

### 6. XSS Pattern Reading
```java
// Look for:
- Direct output writing
  BAD:  response.getWriter().write(userInput)
  GOOD: Proper HTML encoding

- Template engine usage
  BAD:  th:utext="${userInput}"
  GOOD: th:text="${userInput}"

Check for:
- Output encoding context
- Content-Type headers
- Template engine configuration
```

### 7. SSRF Pattern Reading
```java
// Look for:
- URL construction
  BAD:  new URL(userInput)
  GOOD: URL whitelist validation

- HTTP client usage
  Check for:
  - URL validation
  - Redirect handling
  - Protocol restrictions
```

### 8. Cryptographic Implementation Reading
```java
// Look for:
- Weak algorithms
  BAD:  Cipher.getInstance("DES")
  GOOD: Cipher.getInstance("AES/GCM/NoPadding")

- Key size issues
  BAD:  keyGen.initialize(1024) // for RSA
  GOOD: keyGen.initialize(2048)

Check for:
- Algorithm selection
- Mode of operation
- Key management
```

### 9. Authentication Pattern Reading
```java
// Look for:
- Hardcoded credentials
  BAD:  String password = "hardcoded"
  GOOD: Configuration or secure storage

- JWT handling
  Check for:
  - Algorithm verification
  - Signature validation
  - Token validation logic
```

### 10. Session Management Reading
```java
// Look for:
- Session configuration
  Check for:
  - Timeout settings
  - Session fixation protection
  - Secure session ID handling

- CSRF protection
  BAD:  http.csrf().disable()
  GOOD: Proper CSRF token validation
```

### 11. Error Handling Pattern Reading
```java
// Look for:
- Exception handling
  BAD:  catch (Throwable e)
  GOOD: Specific exception handling

- Error exposure
  BAD:  response.sendError(500, e.toString())
  GOOD: Sanitized error messages
```

### 12. Logging Pattern Reading
```java
// Look for:
- Log injection
  BAD:  logger.info(userInput)
  GOOD: Sanitized log messages

- Sensitive data logging
  BAD:  logger.debug("Password: " + password)
  GOOD: Masked sensitive data
```

<critical>
When reading code:
- Focus on data flow from input to sensitive operations
- Check for proper validation and sanitization
- Verify security control implementation
- Look for common vulnerability patterns
- Consider business logic implications
</critical>

## Review Checklist

### 1. Entry Points
- [ ] All public APIs identified
- [ ] Parameter validation traced
- [ ] Return value handling checked
- [ ] Error paths analyzed

### 2. Data Flow
- [ ] Input sources identified
- [ ] Data transformations traced
- [ ] Storage operations verified
- [ ] Output handling checked

### 3. Business Logic
- [ ] Workflow steps verified
- [ ] State transitions checked
- [ ] Business rules validated
- [ ] Edge cases considered

## Documentation Template

### 1. Issue Description
```markdown
Location: File path and line numbers
Type: Issue category
Description: Detailed explanation
Impact: Affected functionality
```

### 2. Technical Analysis
```markdown
Code Review:
- Relevant code snippets
- Logic flow analysis
- Vulnerability pattern
- Context explanation

Root Cause:
- Design issu flols
- Incorrect assumptions
```

### 3. Risk Assessment
```markdown
Attack Scenario:
- Prerequisites
- Attack steps
- Technical impact
- Business impact

Verification:
- Reproduction steps
- Test cases
- Context requirements
```

## Review Process

### 1. Initial Review
1. Read documentation
2. Understand requirements
3. Map key components
4. Identify critical paths

### 2. Detailed Analysis
1. Read source code
2. Follow data flows
3. Analyze logic
4. Document findings

### 3. Cross-Reference
1. Compare similar features
2. Check consistent patterns
3. Verify security controls
4. Validate assumptions

### 4. Verification
1. Confirm findings
2. Test edge cases
3. Validate impact
4. Document evidence

<critical>
Key Principles:
- Read code systematically
- Understand business context
- Follow data flows completely
- Question assumptions
- Document thoroughly
- Verify findings manually
</critical>

<workflow-rules>
1. No reliance on automated tools
2. Complete manual code reading
3. Thorough documentation
4. Evidence-based findings
</workflow-rules>